/* automatically generated by rust-bindgen 0.59.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const MAX_SERIALNUMBER_LENGTH: u32 = 10;
pub const MAX_DEVICEID_LENGTH: u32 = 32;
pub const MAX_BOARDMODELSTRING_LENGTH: u32 = 64;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const OK_MAX_DEVICEID_LENGTH: u32 = 33;
pub const OK_MAX_SERIALNUMBER_LENGTH: u32 = 11;
pub const OK_MAX_PRODUCT_NAME_LENGTH: u32 = 128;
pub const OK_MAX_BOARD_MODEL_STRING_LENGTH: u32 = 128;
pub const OK_USBSPEED_UNKNOWN: u32 = 0;
pub const OK_USBSPEED_FULL: u32 = 1;
pub const OK_USBSPEED_HIGH: u32 = 2;
pub const OK_USBSPEED_SUPER: u32 = 3;
pub const OK_INTERFACE_UNKNOWN: u32 = 0;
pub const OK_INTERFACE_USB2: u32 = 1;
pub const OK_INTERFACE_PCIE: u32 = 2;
pub const OK_INTERFACE_USB3: u32 = 3;
pub const OK_PRODUCT_UNKNOWN: u32 = 0;
pub const OK_PRODUCT_XEM3001V1: u32 = 1;
pub const OK_PRODUCT_XEM3001V2: u32 = 2;
pub const OK_PRODUCT_XEM3010: u32 = 3;
pub const OK_PRODUCT_XEM3005: u32 = 4;
pub const OK_PRODUCT_XEM3001CL: u32 = 5;
pub const OK_PRODUCT_XEM3020: u32 = 6;
pub const OK_PRODUCT_XEM3050: u32 = 7;
pub const OK_PRODUCT_XEM9002: u32 = 8;
pub const OK_PRODUCT_XEM3001RB: u32 = 9;
pub const OK_PRODUCT_XEM5010: u32 = 10;
pub const OK_PRODUCT_XEM6110LX45: u32 = 11;
pub const OK_PRODUCT_XEM6001: u32 = 12;
pub const OK_PRODUCT_XEM6010LX45: u32 = 13;
pub const OK_PRODUCT_XEM6010LX150: u32 = 14;
pub const OK_PRODUCT_XEM6110LX150: u32 = 15;
pub const OK_PRODUCT_XEM6006LX9: u32 = 16;
pub const OK_PRODUCT_XEM6006LX16: u32 = 17;
pub const OK_PRODUCT_XEM6006LX25: u32 = 18;
pub const OK_PRODUCT_XEM5010LX110: u32 = 19;
pub const OK_PRODUCT_ZEM4310: u32 = 20;
pub const OK_PRODUCT_XEM6310LX45: u32 = 21;
pub const OK_PRODUCT_XEM6310LX150: u32 = 22;
pub const OK_PRODUCT_XEM6110V2LX45: u32 = 23;
pub const OK_PRODUCT_XEM6110V2LX150: u32 = 24;
pub const OK_PRODUCT_XEM6002LX9: u32 = 25;
pub const OK_PRODUCT_XEM6310MTLX45T: u32 = 26;
pub const OK_PRODUCT_XEM6320LX130T: u32 = 27;
pub const OK_PRODUCT_XEM7350K70T: u32 = 28;
pub const OK_PRODUCT_XEM7350K160T: u32 = 29;
pub const OK_PRODUCT_XEM7350K410T: u32 = 30;
pub const OK_PRODUCT_XEM6310MTLX150T: u32 = 31;
pub const OK_PRODUCT_ZEM5305A2: u32 = 32;
pub const OK_PRODUCT_ZEM5305A7: u32 = 33;
pub const OK_PRODUCT_XEM7001A15: u32 = 34;
pub const OK_PRODUCT_XEM7001A35: u32 = 35;
pub const OK_PRODUCT_XEM7360K160T: u32 = 36;
pub const OK_PRODUCT_XEM7360K410T: u32 = 37;
pub const OK_PRODUCT_ZEM5310A4: u32 = 38;
pub const OK_PRODUCT_ZEM5310A7: u32 = 39;
pub const OK_PRODUCT_ZEM5370A5: u32 = 40;
pub const OK_PRODUCT_XEM7010A50: u32 = 41;
pub const OK_PRODUCT_XEM7010A200: u32 = 42;
pub const OK_PRODUCT_XEM7310A75: u32 = 43;
pub const OK_PRODUCT_XEM7310A200: u32 = 44;
pub const OK_PRODUCT_XEM7320A75T: u32 = 45;
pub const OK_PRODUCT_XEM7320A200T: u32 = 46;
pub const OK_PRODUCT_XEM7305: u32 = 47;
pub const OK_PRODUCT_FPX1301: u32 = 48;
pub const OK_PRODUCT_XEM8350KU060: u32 = 49;
pub const OK_PRODUCT_XEM8350KU085: u32 = 50;
pub const OK_PRODUCT_XEM8350KU115: u32 = 51;
pub const OK_PRODUCT_XEM8350SECONDARY: u32 = 52;
pub const OK_PRODUCT_XEM7310MTA75: u32 = 53;
pub const OK_PRODUCT_XEM7310MTA200: u32 = 54;
pub const OK_PRODUCT_OEM_START: u32 = 11000;
pub const OK_FPGACONFIGURATIONMETHOD_NVRAM: u32 = 0;
pub const OK_FPGACONFIGURATIONMETHOD_JTAG: u32 = 1;
pub const okFPGARESETPROFILE_MAGIC: u32 = 3188292669;
pub const OK_MAX_DEVICE_SENSOR_NAME_LENGTH: u32 = 64;
pub const OK_MAX_DEVICE_SENSOR_DESCRIPTION_LENGTH: u32 = 256;
pub const OK_API_VERSION_MAJOR: u32 = 5;
pub const OK_API_VERSION_MINOR: u32 = 2;
pub const OK_API_VERSION_MICRO: u32 = 0;
pub const OK_API_VERSION_STRING: &'static [u8; 6usize] = b"5.2.0\0";
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type UINT32 = u32;
pub type UINT8 = u8;
pub type okFP_dll_pchar = *const ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct okPLL22150Handle {
    _unused: [u8; 0],
}
pub type okPLL22150_HANDLE = *mut okPLL22150Handle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct okPLL22393Handle {
    _unused: [u8; 0],
}
pub type okPLL22393_HANDLE = *mut okPLL22393Handle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct okDeviceSensorsHandle {
    _unused: [u8; 0],
}
pub type okDeviceSensors_HANDLE = *mut okDeviceSensorsHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct okDeviceSettingNamesHandle {
    _unused: [u8; 0],
}
pub type okDeviceSettingNames_HANDLE = *mut okDeviceSettingNamesHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct okDeviceSettingsHandle {
    _unused: [u8; 0],
}
pub type okDeviceSettings_HANDLE = *mut okDeviceSettingsHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct okBufferHandle {
    _unused: [u8; 0],
}
pub type okBuffer_HANDLE = *mut okBufferHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct okScriptValueHandle {
    _unused: [u8; 0],
}
pub type okScriptValue_HANDLE = *mut okScriptValueHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct okScriptValuesHandle {
    _unused: [u8; 0],
}
pub type okScriptValues_HANDLE = *mut okScriptValuesHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct okScriptEngineHandle {
    _unused: [u8; 0],
}
pub type okScriptEngine_HANDLE = *mut okScriptEngineHandle;
pub type okScriptEngineAsyncCallback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_char,
        arg3: okScriptValues_HANDLE,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct okFrontPanelHandle {
    _unused: [u8; 0],
}
pub type okFrontPanel_HANDLE = *mut okFrontPanelHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct okFrontPanelManagerHandle {
    _unused: [u8; 0],
}
pub type okFrontPanelManager_HANDLE = *mut okFrontPanelManagerHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct okCFrontPanelManagerHandle {
    _unused: [u8; 0],
}
pub type okCFrontPanelManager_HANDLE = *mut okCFrontPanelManagerHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct okCFrontPanelDevicesHandle {
    _unused: [u8; 0],
}
pub type okCFrontPanelDevices_HANDLE = *mut okCFrontPanelDevicesHandle;
pub type Bool = ::std::os::raw::c_int;
pub type okBool = ::std::os::raw::c_char;
pub const ok_ClockSource_22150_ok_ClkSrc22150_Ref: ok_ClockSource_22150 = 0;
pub const ok_ClockSource_22150_ok_ClkSrc22150_Div1ByN: ok_ClockSource_22150 = 1;
pub const ok_ClockSource_22150_ok_ClkSrc22150_Div1By2: ok_ClockSource_22150 = 2;
pub const ok_ClockSource_22150_ok_ClkSrc22150_Div1By3: ok_ClockSource_22150 = 3;
pub const ok_ClockSource_22150_ok_ClkSrc22150_Div2ByN: ok_ClockSource_22150 = 4;
pub const ok_ClockSource_22150_ok_ClkSrc22150_Div2By2: ok_ClockSource_22150 = 5;
pub const ok_ClockSource_22150_ok_ClkSrc22150_Div2By4: ok_ClockSource_22150 = 6;
pub type ok_ClockSource_22150 = ::std::os::raw::c_uint;
pub const ok_ClockSource_22393_ok_ClkSrc22393_Ref: ok_ClockSource_22393 = 0;
pub const ok_ClockSource_22393_ok_ClkSrc22393_PLL0_0: ok_ClockSource_22393 = 2;
pub const ok_ClockSource_22393_ok_ClkSrc22393_PLL0_180: ok_ClockSource_22393 = 3;
pub const ok_ClockSource_22393_ok_ClkSrc22393_PLL1_0: ok_ClockSource_22393 = 4;
pub const ok_ClockSource_22393_ok_ClkSrc22393_PLL1_180: ok_ClockSource_22393 = 5;
pub const ok_ClockSource_22393_ok_ClkSrc22393_PLL2_0: ok_ClockSource_22393 = 6;
pub const ok_ClockSource_22393_ok_ClkSrc22393_PLL2_180: ok_ClockSource_22393 = 7;
pub type ok_ClockSource_22393 = ::std::os::raw::c_uint;
pub const ok_DividerSource_ok_DivSrc_Ref: ok_DividerSource = 0;
pub const ok_DividerSource_ok_DivSrc_VCO: ok_DividerSource = 1;
pub type ok_DividerSource = ::std::os::raw::c_uint;
pub const ok_BoardModel_ok_brdUnknown: ok_BoardModel = 0;
pub const ok_BoardModel_ok_brdXEM3001v1: ok_BoardModel = 1;
pub const ok_BoardModel_ok_brdXEM3001v2: ok_BoardModel = 2;
pub const ok_BoardModel_ok_brdXEM3010: ok_BoardModel = 3;
pub const ok_BoardModel_ok_brdXEM3005: ok_BoardModel = 4;
pub const ok_BoardModel_ok_brdXEM3001CL: ok_BoardModel = 5;
pub const ok_BoardModel_ok_brdXEM3020: ok_BoardModel = 6;
pub const ok_BoardModel_ok_brdXEM3050: ok_BoardModel = 7;
pub const ok_BoardModel_ok_brdXEM9002: ok_BoardModel = 8;
pub const ok_BoardModel_ok_brdXEM3001RB: ok_BoardModel = 9;
pub const ok_BoardModel_ok_brdXEM5010: ok_BoardModel = 10;
pub const ok_BoardModel_ok_brdXEM6110LX45: ok_BoardModel = 11;
pub const ok_BoardModel_ok_brdXEM6110LX150: ok_BoardModel = 15;
pub const ok_BoardModel_ok_brdXEM6001: ok_BoardModel = 12;
pub const ok_BoardModel_ok_brdXEM6010LX45: ok_BoardModel = 13;
pub const ok_BoardModel_ok_brdXEM6010LX150: ok_BoardModel = 14;
pub const ok_BoardModel_ok_brdXEM6006LX9: ok_BoardModel = 16;
pub const ok_BoardModel_ok_brdXEM6006LX16: ok_BoardModel = 17;
pub const ok_BoardModel_ok_brdXEM6006LX25: ok_BoardModel = 18;
pub const ok_BoardModel_ok_brdXEM5010LX110: ok_BoardModel = 19;
pub const ok_BoardModel_ok_brdZEM4310: ok_BoardModel = 20;
pub const ok_BoardModel_ok_brdXEM6310LX45: ok_BoardModel = 21;
pub const ok_BoardModel_ok_brdXEM6310LX150: ok_BoardModel = 22;
pub const ok_BoardModel_ok_brdXEM6110v2LX45: ok_BoardModel = 23;
pub const ok_BoardModel_ok_brdXEM6110v2LX150: ok_BoardModel = 24;
pub const ok_BoardModel_ok_brdXEM6002LX9: ok_BoardModel = 25;
pub const ok_BoardModel_ok_brdXEM6310MTLX45T: ok_BoardModel = 26;
pub const ok_BoardModel_ok_brdXEM6320LX130T: ok_BoardModel = 27;
pub const ok_BoardModel_ok_brdXEM7350K70T: ok_BoardModel = 28;
pub const ok_BoardModel_ok_brdXEM7350K160T: ok_BoardModel = 29;
pub const ok_BoardModel_ok_brdXEM7350K410T: ok_BoardModel = 30;
pub const ok_BoardModel_ok_brdXEM6310MTLX150T: ok_BoardModel = 31;
pub const ok_BoardModel_ok_brdZEM5305A2: ok_BoardModel = 32;
pub const ok_BoardModel_ok_brdZEM5305A7: ok_BoardModel = 33;
pub const ok_BoardModel_ok_brdXEM7001A15: ok_BoardModel = 34;
pub const ok_BoardModel_ok_brdXEM7001A35: ok_BoardModel = 35;
pub const ok_BoardModel_ok_brdXEM7360K160T: ok_BoardModel = 36;
pub const ok_BoardModel_ok_brdXEM7360K410T: ok_BoardModel = 37;
pub const ok_BoardModel_ok_brdZEM5310A4: ok_BoardModel = 38;
pub const ok_BoardModel_ok_brdZEM5310A7: ok_BoardModel = 39;
pub const ok_BoardModel_ok_brdZEM5370A5: ok_BoardModel = 40;
pub const ok_BoardModel_ok_brdXEM7010A50: ok_BoardModel = 41;
pub const ok_BoardModel_ok_brdXEM7010A200: ok_BoardModel = 42;
pub const ok_BoardModel_ok_brdXEM7310A75: ok_BoardModel = 43;
pub const ok_BoardModel_ok_brdXEM7310A200: ok_BoardModel = 44;
pub const ok_BoardModel_ok_brdXEM7320A75T: ok_BoardModel = 45;
pub const ok_BoardModel_ok_brdXEM7320A200T: ok_BoardModel = 46;
pub const ok_BoardModel_ok_brdXEM7305: ok_BoardModel = 47;
pub const ok_BoardModel_ok_brdFPX1301: ok_BoardModel = 48;
pub const ok_BoardModel_ok_brdXEM8350KU060: ok_BoardModel = 49;
pub const ok_BoardModel_ok_brdXEM8350KU085: ok_BoardModel = 50;
pub const ok_BoardModel_ok_brdXEM8350KU115: ok_BoardModel = 51;
pub const ok_BoardModel_ok_brdXEM8350SECONDARY: ok_BoardModel = 52;
pub const ok_BoardModel_ok_brdXEM7310MTA75: ok_BoardModel = 53;
pub const ok_BoardModel_ok_brdXEM7310MTA200: ok_BoardModel = 54;
pub type ok_BoardModel = ::std::os::raw::c_uint;
pub const ok_ErrorCode_ok_NoError: ok_ErrorCode = 0;
pub const ok_ErrorCode_ok_Failed: ok_ErrorCode = -1;
pub const ok_ErrorCode_ok_Timeout: ok_ErrorCode = -2;
pub const ok_ErrorCode_ok_DoneNotHigh: ok_ErrorCode = -3;
pub const ok_ErrorCode_ok_TransferError: ok_ErrorCode = -4;
pub const ok_ErrorCode_ok_CommunicationError: ok_ErrorCode = -5;
pub const ok_ErrorCode_ok_InvalidBitstream: ok_ErrorCode = -6;
pub const ok_ErrorCode_ok_FileError: ok_ErrorCode = -7;
pub const ok_ErrorCode_ok_DeviceNotOpen: ok_ErrorCode = -8;
pub const ok_ErrorCode_ok_InvalidEndpoint: ok_ErrorCode = -9;
pub const ok_ErrorCode_ok_InvalidBlockSize: ok_ErrorCode = -10;
pub const ok_ErrorCode_ok_I2CRestrictedAddress: ok_ErrorCode = -11;
pub const ok_ErrorCode_ok_I2CBitError: ok_ErrorCode = -12;
pub const ok_ErrorCode_ok_I2CNack: ok_ErrorCode = -13;
pub const ok_ErrorCode_ok_I2CUnknownStatus: ok_ErrorCode = -14;
pub const ok_ErrorCode_ok_UnsupportedFeature: ok_ErrorCode = -15;
pub const ok_ErrorCode_ok_FIFOUnderflow: ok_ErrorCode = -16;
pub const ok_ErrorCode_ok_FIFOOverflow: ok_ErrorCode = -17;
pub const ok_ErrorCode_ok_DataAlignmentError: ok_ErrorCode = -18;
pub const ok_ErrorCode_ok_InvalidResetProfile: ok_ErrorCode = -19;
pub const ok_ErrorCode_ok_InvalidParameter: ok_ErrorCode = -20;
pub type ok_ErrorCode = ::std::os::raw::c_int;
pub type okEUSBSpeed = ::std::os::raw::c_int;
pub type okEDeviceInterface = ::std::os::raw::c_int;
pub type okEProduct = ::std::os::raw::c_int;
pub const okEFPGAConfigurationMethod_ok_FPGAConfigurationMethod_NVRAM: okEFPGAConfigurationMethod =
    0;
pub const okEFPGAConfigurationMethod_ok_FPGAConfigurationMethod_JTAG: okEFPGAConfigurationMethod =
    1;
pub type okEFPGAConfigurationMethod = ::std::os::raw::c_uint;
pub const okEFPGAVendor_okFPGAVENDOR_UNKNOWN: okEFPGAVendor = 0;
pub const okEFPGAVendor_okFPGAVENDOR_XILINX: okEFPGAVendor = 1;
pub const okEFPGAVendor_okFPGAVENDOR_INTEL: okEFPGAVendor = 2;
pub type okEFPGAVendor = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct okTRegisterEntry {
    pub address: UINT32,
    pub data: UINT32,
}
#[test]
fn bindgen_test_layout_okTRegisterEntry() {
    assert_eq!(
        ::std::mem::size_of::<okTRegisterEntry>(),
        8usize,
        concat!("Size of: ", stringify!(okTRegisterEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<okTRegisterEntry>(),
        4usize,
        concat!("Alignment of ", stringify!(okTRegisterEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTRegisterEntry>())).address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(okTRegisterEntry),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTRegisterEntry>())).data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(okTRegisterEntry),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct okTTriggerEntry {
    pub address: UINT32,
    pub mask: UINT32,
}
#[test]
fn bindgen_test_layout_okTTriggerEntry() {
    assert_eq!(
        ::std::mem::size_of::<okTTriggerEntry>(),
        8usize,
        concat!("Size of: ", stringify!(okTTriggerEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<okTTriggerEntry>(),
        4usize,
        concat!("Alignment of ", stringify!(okTTriggerEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTTriggerEntry>())).address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(okTTriggerEntry),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTTriggerEntry>())).mask as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(okTTriggerEntry),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct okTFPGAResetProfile {
    pub magic: UINT32,
    pub configFileLocation: UINT32,
    pub configFileLength: UINT32,
    pub doneWaitUS: UINT32,
    pub resetWaitUS: UINT32,
    pub registerWaitUS: UINT32,
    pub padBytes1: [UINT32; 28usize],
    pub wireInValues: [UINT32; 32usize],
    pub registerEntryCount: UINT32,
    pub registerEntries: [okTRegisterEntry; 256usize],
    pub triggerEntryCount: UINT32,
    pub triggerEntries: [okTTriggerEntry; 32usize],
    pub padBytes2: [UINT8; 1520usize],
}
#[test]
fn bindgen_test_layout_okTFPGAResetProfile() {
    assert_eq!(
        ::std::mem::size_of::<okTFPGAResetProfile>(),
        4096usize,
        concat!("Size of: ", stringify!(okTFPGAResetProfile))
    );
    assert_eq!(
        ::std::mem::align_of::<okTFPGAResetProfile>(),
        4usize,
        concat!("Alignment of ", stringify!(okTFPGAResetProfile))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTFPGAResetProfile>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(okTFPGAResetProfile),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<okTFPGAResetProfile>())).configFileLocation as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(okTFPGAResetProfile),
            "::",
            stringify!(configFileLocation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<okTFPGAResetProfile>())).configFileLength as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(okTFPGAResetProfile),
            "::",
            stringify!(configFileLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTFPGAResetProfile>())).doneWaitUS as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(okTFPGAResetProfile),
            "::",
            stringify!(doneWaitUS)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTFPGAResetProfile>())).resetWaitUS as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(okTFPGAResetProfile),
            "::",
            stringify!(resetWaitUS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<okTFPGAResetProfile>())).registerWaitUS as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(okTFPGAResetProfile),
            "::",
            stringify!(registerWaitUS)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTFPGAResetProfile>())).padBytes1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(okTFPGAResetProfile),
            "::",
            stringify!(padBytes1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<okTFPGAResetProfile>())).wireInValues as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(okTFPGAResetProfile),
            "::",
            stringify!(wireInValues)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<okTFPGAResetProfile>())).registerEntryCount as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(okTFPGAResetProfile),
            "::",
            stringify!(registerEntryCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<okTFPGAResetProfile>())).registerEntries as *const _ as usize
        },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(okTFPGAResetProfile),
            "::",
            stringify!(registerEntries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<okTFPGAResetProfile>())).triggerEntryCount as *const _ as usize
        },
        2316usize,
        concat!(
            "Offset of field: ",
            stringify!(okTFPGAResetProfile),
            "::",
            stringify!(triggerEntryCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<okTFPGAResetProfile>())).triggerEntries as *const _ as usize
        },
        2320usize,
        concat!(
            "Offset of field: ",
            stringify!(okTFPGAResetProfile),
            "::",
            stringify!(triggerEntries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTFPGAResetProfile>())).padBytes2 as *const _ as usize },
        2576usize,
        concat!(
            "Offset of field: ",
            stringify!(okTFPGAResetProfile),
            "::",
            stringify!(padBytes2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct okTFlashLayout {
    pub sectorCount: UINT32,
    pub sectorSize: UINT32,
    pub pageSize: UINT32,
    pub minUserSector: UINT32,
    pub maxUserSector: UINT32,
}
#[test]
fn bindgen_test_layout_okTFlashLayout() {
    assert_eq!(
        ::std::mem::size_of::<okTFlashLayout>(),
        20usize,
        concat!("Size of: ", stringify!(okTFlashLayout))
    );
    assert_eq!(
        ::std::mem::align_of::<okTFlashLayout>(),
        4usize,
        concat!("Alignment of ", stringify!(okTFlashLayout))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTFlashLayout>())).sectorCount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(okTFlashLayout),
            "::",
            stringify!(sectorCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTFlashLayout>())).sectorSize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(okTFlashLayout),
            "::",
            stringify!(sectorSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTFlashLayout>())).pageSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(okTFlashLayout),
            "::",
            stringify!(pageSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTFlashLayout>())).minUserSector as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(okTFlashLayout),
            "::",
            stringify!(minUserSector)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTFlashLayout>())).maxUserSector as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(okTFlashLayout),
            "::",
            stringify!(maxUserSector)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct okTDeviceInfo {
    pub deviceID: [::std::os::raw::c_char; 33usize],
    pub serialNumber: [::std::os::raw::c_char; 11usize],
    pub productName: [::std::os::raw::c_char; 128usize],
    pub productID: ::std::os::raw::c_int,
    pub deviceInterface: okEDeviceInterface,
    pub usbSpeed: okEUSBSpeed,
    pub deviceMajorVersion: ::std::os::raw::c_int,
    pub deviceMinorVersion: ::std::os::raw::c_int,
    pub hostInterfaceMajorVersion: ::std::os::raw::c_int,
    pub hostInterfaceMinorVersion: ::std::os::raw::c_int,
    pub isPLL22150Supported: okBool,
    pub isPLL22393Supported: okBool,
    pub isFrontPanelEnabled: okBool,
    pub wireWidth: ::std::os::raw::c_int,
    pub triggerWidth: ::std::os::raw::c_int,
    pub pipeWidth: ::std::os::raw::c_int,
    pub registerAddressWidth: ::std::os::raw::c_int,
    pub registerDataWidth: ::std::os::raw::c_int,
    pub flashSystem: okTFlashLayout,
    pub flashFPGA: okTFlashLayout,
    pub hasFMCEEPROM: okBool,
    pub hasResetProfiles: okBool,
    pub fpgaVendor: okEFPGAVendor,
    pub interfaceCount: ::std::os::raw::c_int,
    pub interfaceIndex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_okTDeviceInfo() {
    assert_eq!(
        ::std::mem::size_of::<okTDeviceInfo>(),
        280usize,
        concat!("Size of: ", stringify!(okTDeviceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<okTDeviceInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(okTDeviceInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceInfo>())).deviceID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(deviceID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceInfo>())).serialNumber as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(serialNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceInfo>())).productName as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(productName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceInfo>())).productID as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(productID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceInfo>())).deviceInterface as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(deviceInterface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceInfo>())).usbSpeed as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(usbSpeed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<okTDeviceInfo>())).deviceMajorVersion as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(deviceMajorVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<okTDeviceInfo>())).deviceMinorVersion as *const _ as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(deviceMinorVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<okTDeviceInfo>())).hostInterfaceMajorVersion as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(hostInterfaceMajorVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<okTDeviceInfo>())).hostInterfaceMinorVersion as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(hostInterfaceMinorVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<okTDeviceInfo>())).isPLL22150Supported as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(isPLL22150Supported)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<okTDeviceInfo>())).isPLL22393Supported as *const _ as usize
        },
        201usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(isPLL22393Supported)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<okTDeviceInfo>())).isFrontPanelEnabled as *const _ as usize
        },
        202usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(isFrontPanelEnabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceInfo>())).wireWidth as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(wireWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceInfo>())).triggerWidth as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(triggerWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceInfo>())).pipeWidth as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(pipeWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<okTDeviceInfo>())).registerAddressWidth as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(registerAddressWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceInfo>())).registerDataWidth as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(registerDataWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceInfo>())).flashSystem as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(flashSystem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceInfo>())).flashFPGA as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(flashFPGA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceInfo>())).hasFMCEEPROM as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(hasFMCEEPROM)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceInfo>())).hasResetProfiles as *const _ as usize },
        265usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(hasResetProfiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceInfo>())).fpgaVendor as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(fpgaVendor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceInfo>())).interfaceCount as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(interfaceCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceInfo>())).interfaceIndex as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceInfo),
            "::",
            stringify!(interfaceIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct okTDeviceMatchInfo {
    pub productName: [::std::os::raw::c_char; 128usize],
    pub productBaseID: okEProduct,
    pub productID: ::std::os::raw::c_int,
    pub usbVID: UINT32,
    pub usbPID: UINT32,
    pub pciDID: UINT32,
}
#[test]
fn bindgen_test_layout_okTDeviceMatchInfo() {
    assert_eq!(
        ::std::mem::size_of::<okTDeviceMatchInfo>(),
        148usize,
        concat!("Size of: ", stringify!(okTDeviceMatchInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<okTDeviceMatchInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(okTDeviceMatchInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceMatchInfo>())).productName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceMatchInfo),
            "::",
            stringify!(productName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<okTDeviceMatchInfo>())).productBaseID as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceMatchInfo),
            "::",
            stringify!(productBaseID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceMatchInfo>())).productID as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceMatchInfo),
            "::",
            stringify!(productID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceMatchInfo>())).usbVID as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceMatchInfo),
            "::",
            stringify!(usbVID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceMatchInfo>())).usbPID as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceMatchInfo),
            "::",
            stringify!(usbPID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceMatchInfo>())).pciDID as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceMatchInfo),
            "::",
            stringify!(pciDID)
        )
    );
}
pub const okEDeviceSensorType_okDEVICESENSOR_INVALID: okEDeviceSensorType = 0;
pub const okEDeviceSensorType_okDEVICESENSOR_BOOL: okEDeviceSensorType = 1;
pub const okEDeviceSensorType_okDEVICESENSOR_INTEGER: okEDeviceSensorType = 2;
pub const okEDeviceSensorType_okDEVICESENSOR_FLOAT: okEDeviceSensorType = 3;
pub const okEDeviceSensorType_okDEVICESENSOR_VOLTAGE: okEDeviceSensorType = 4;
pub const okEDeviceSensorType_okDEVICESENSOR_CURRENT: okEDeviceSensorType = 5;
pub const okEDeviceSensorType_okDEVICESENSOR_TEMPERATURE: okEDeviceSensorType = 6;
pub const okEDeviceSensorType_okDEVICESENSOR_FAN_RPM: okEDeviceSensorType = 7;
pub type okEDeviceSensorType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct okTDeviceSensor {
    pub id: ::std::os::raw::c_int,
    pub type_: okEDeviceSensorType,
    pub name: [::std::os::raw::c_char; 64usize],
    pub description: [::std::os::raw::c_char; 256usize],
    pub min: f64,
    pub max: f64,
    pub step: f64,
    pub value: f64,
}
#[test]
fn bindgen_test_layout_okTDeviceSensor() {
    assert_eq!(
        ::std::mem::size_of::<okTDeviceSensor>(),
        360usize,
        concat!("Size of: ", stringify!(okTDeviceSensor))
    );
    assert_eq!(
        ::std::mem::align_of::<okTDeviceSensor>(),
        8usize,
        concat!("Alignment of ", stringify!(okTDeviceSensor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceSensor>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceSensor),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceSensor>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceSensor),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceSensor>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceSensor),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceSensor>())).description as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceSensor),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceSensor>())).min as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceSensor),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceSensor>())).max as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceSensor),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceSensor>())).step as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceSensor),
            "::",
            stringify!(step)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTDeviceSensor>())).value as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(okTDeviceSensor),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct okTCallbackInfo {
    pub fd: ::std::os::raw::c_int,
    pub callback: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub param: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_okTCallbackInfo() {
    assert_eq!(
        ::std::mem::size_of::<okTCallbackInfo>(),
        24usize,
        concat!("Size of: ", stringify!(okTCallbackInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<okTCallbackInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(okTCallbackInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTCallbackInfo>())).fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(okTCallbackInfo),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTCallbackInfo>())).callback as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(okTCallbackInfo),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<okTCallbackInfo>())).param as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(okTCallbackInfo),
            "::",
            stringify!(param)
        )
    );
}
pub type okTProgressCallback = ::std::option::Option<
    unsafe extern "C" fn(
        maximum: ::std::os::raw::c_int,
        current: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    ),
>;
pub use self::okEFPGAConfigurationMethod as ok_FPGAConfigurationMethod;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct okErrorPrivate {
    _unused: [u8; 0],
}
pub type okError = okErrorPrivate;
extern "C" {
    pub fn okError_GetMessage(err: *const okError) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn okError_Free(err: *mut okError);
}
extern "C" {
    pub fn okFrontPanel_GetAPIVersionMajor() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn okFrontPanel_GetAPIVersionMinor() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn okFrontPanel_GetAPIVersionMicro() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn okFrontPanel_GetAPIVersionString() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn okFrontPanel_CheckAPIVersion(
        major: ::std::os::raw::c_int,
        minor: ::std::os::raw::c_int,
        micro: ::std::os::raw::c_int,
    ) -> Bool;
}
extern "C" {
    pub fn okPLL22393_Construct() -> okPLL22393_HANDLE;
}
extern "C" {
    pub fn okPLL22393_Destruct(pll: okPLL22393_HANDLE);
}
extern "C" {
    pub fn okPLL22393_SetCrystalLoad(pll: okPLL22393_HANDLE, capload: f64) -> Bool;
}
extern "C" {
    pub fn okPLL22393_SetReference(pll: okPLL22393_HANDLE, freq: f64);
}
extern "C" {
    pub fn okPLL22393_GetReference(pll: okPLL22393_HANDLE) -> f64;
}
extern "C" {
    pub fn okPLL22393_SetPLLParameters(
        pll: okPLL22393_HANDLE,
        n: ::std::os::raw::c_int,
        p: ::std::os::raw::c_int,
        q: ::std::os::raw::c_int,
        enable: Bool,
    ) -> Bool;
}
extern "C" {
    pub fn okPLL22393_SetPLLLF(
        pll: okPLL22393_HANDLE,
        n: ::std::os::raw::c_int,
        lf: ::std::os::raw::c_int,
    ) -> Bool;
}
extern "C" {
    pub fn okPLL22393_SetOutputDivider(
        pll: okPLL22393_HANDLE,
        n: ::std::os::raw::c_int,
        div: ::std::os::raw::c_int,
    ) -> Bool;
}
extern "C" {
    pub fn okPLL22393_SetOutputSource(
        pll: okPLL22393_HANDLE,
        n: ::std::os::raw::c_int,
        clksrc: ok_ClockSource_22393,
    ) -> Bool;
}
extern "C" {
    pub fn okPLL22393_SetOutputEnable(
        pll: okPLL22393_HANDLE,
        n: ::std::os::raw::c_int,
        enable: Bool,
    );
}
extern "C" {
    pub fn okPLL22393_GetPLLP(
        pll: okPLL22393_HANDLE,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn okPLL22393_GetPLLQ(
        pll: okPLL22393_HANDLE,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn okPLL22393_GetPLLFrequency(pll: okPLL22393_HANDLE, n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn okPLL22393_GetOutputDivider(
        pll: okPLL22393_HANDLE,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn okPLL22393_GetOutputSource(
        pll: okPLL22393_HANDLE,
        n: ::std::os::raw::c_int,
    ) -> ok_ClockSource_22393;
}
extern "C" {
    pub fn okPLL22393_GetOutputFrequency(pll: okPLL22393_HANDLE, n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn okPLL22393_IsOutputEnabled(pll: okPLL22393_HANDLE, n: ::std::os::raw::c_int) -> Bool;
}
extern "C" {
    pub fn okPLL22393_IsPLLEnabled(pll: okPLL22393_HANDLE, n: ::std::os::raw::c_int) -> Bool;
}
extern "C" {
    pub fn okPLL22150_Construct() -> okPLL22150_HANDLE;
}
extern "C" {
    pub fn okPLL22150_Destruct(pll: okPLL22150_HANDLE);
}
extern "C" {
    pub fn okPLL22150_SetCrystalLoad(pll: okPLL22150_HANDLE, capload: f64);
}
extern "C" {
    pub fn okPLL22150_SetReference(pll: okPLL22150_HANDLE, freq: f64, extosc: Bool);
}
extern "C" {
    pub fn okPLL22150_GetReference(pll: okPLL22150_HANDLE) -> f64;
}
extern "C" {
    pub fn okPLL22150_SetVCOParameters(
        pll: okPLL22150_HANDLE,
        p: ::std::os::raw::c_int,
        q: ::std::os::raw::c_int,
    ) -> Bool;
}
extern "C" {
    pub fn okPLL22150_GetVCOP(pll: okPLL22150_HANDLE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn okPLL22150_GetVCOQ(pll: okPLL22150_HANDLE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn okPLL22150_GetVCOFrequency(pll: okPLL22150_HANDLE) -> f64;
}
extern "C" {
    pub fn okPLL22150_SetDiv1(
        pll: okPLL22150_HANDLE,
        divsrc: ok_DividerSource,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn okPLL22150_SetDiv2(
        pll: okPLL22150_HANDLE,
        divsrc: ok_DividerSource,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn okPLL22150_GetDiv1Source(pll: okPLL22150_HANDLE) -> ok_DividerSource;
}
extern "C" {
    pub fn okPLL22150_GetDiv2Source(pll: okPLL22150_HANDLE) -> ok_DividerSource;
}
extern "C" {
    pub fn okPLL22150_GetDiv1Divider(pll: okPLL22150_HANDLE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn okPLL22150_GetDiv2Divider(pll: okPLL22150_HANDLE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn okPLL22150_SetOutputSource(
        pll: okPLL22150_HANDLE,
        output: ::std::os::raw::c_int,
        clksrc: ok_ClockSource_22150,
    );
}
extern "C" {
    pub fn okPLL22150_SetOutputEnable(
        pll: okPLL22150_HANDLE,
        output: ::std::os::raw::c_int,
        enable: Bool,
    );
}
extern "C" {
    pub fn okPLL22150_GetOutputSource(
        pll: okPLL22150_HANDLE,
        output: ::std::os::raw::c_int,
    ) -> ok_ClockSource_22150;
}
extern "C" {
    pub fn okPLL22150_GetOutputFrequency(
        pll: okPLL22150_HANDLE,
        output: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn okPLL22150_IsOutputEnabled(
        pll: okPLL22150_HANDLE,
        output: ::std::os::raw::c_int,
    ) -> Bool;
}
extern "C" {
    pub fn okDeviceSensors_Construct() -> okDeviceSensors_HANDLE;
}
extern "C" {
    pub fn okDeviceSensors_Destruct(hnd: okDeviceSensors_HANDLE);
}
extern "C" {
    pub fn okDeviceSensors_GetSensorCount(hnd: okDeviceSensors_HANDLE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn okDeviceSensors_GetSensor(
        hnd: okDeviceSensors_HANDLE,
        n: ::std::os::raw::c_int,
    ) -> okTDeviceSensor;
}
extern "C" {
    pub fn okDeviceSettingNames_Construct() -> okDeviceSettingNames_HANDLE;
}
extern "C" {
    pub fn okDeviceSettingNames_Destruct(hnd: okDeviceSettingNames_HANDLE);
}
extern "C" {
    pub fn okDeviceSettingNames_GetCount(hnd: okDeviceSettingNames_HANDLE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn okDeviceSettingNames_Get(
        hnd: okDeviceSettingNames_HANDLE,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn okDeviceSettings_Construct() -> okDeviceSettings_HANDLE;
}
extern "C" {
    pub fn okDeviceSettings_Destruct(hnd: okDeviceSettings_HANDLE);
}
extern "C" {
    pub fn okDeviceSettings_GetString(
        hnd: okDeviceSettings_HANDLE,
        key: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okDeviceSettings_SetString(
        hnd: okDeviceSettings_HANDLE,
        key: *const ::std::os::raw::c_char,
        buf: *const ::std::os::raw::c_char,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okDeviceSettings_GetInt(
        hnd: okDeviceSettings_HANDLE,
        key: *const ::std::os::raw::c_char,
        value: *mut UINT32,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okDeviceSettings_SetInt(
        hnd: okDeviceSettings_HANDLE,
        key: *const ::std::os::raw::c_char,
        value: UINT32,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okDeviceSettings_Delete(
        hnd: okDeviceSettings_HANDLE,
        key: *const ::std::os::raw::c_char,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okDeviceSettings_Save(hnd: okDeviceSettings_HANDLE) -> ok_ErrorCode;
}
extern "C" {
    pub fn okDeviceSettings_List(
        hnd: okDeviceSettings_HANDLE,
        names: okDeviceSettingNames_HANDLE,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okBuffer_Construct(size: ::std::os::raw::c_uint) -> okBuffer_HANDLE;
}
extern "C" {
    pub fn okBuffer_FromData(
        ptr: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_uint,
    ) -> okBuffer_HANDLE;
}
extern "C" {
    pub fn okBuffer_Copy(hnd: okBuffer_HANDLE) -> okBuffer_HANDLE;
}
extern "C" {
    pub fn okBuffer_Destruct(hnd: okBuffer_HANDLE);
}
extern "C" {
    pub fn okBuffer_IsEmpty(hnd: okBuffer_HANDLE) -> okBool;
}
extern "C" {
    pub fn okBuffer_GetSize(hnd: okBuffer_HANDLE) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn okBuffer_GetData(hnd: okBuffer_HANDLE) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn okScriptValue_Copy(h: okScriptValue_HANDLE) -> okScriptValue_HANDLE;
}
extern "C" {
    pub fn okScriptValue_NewString(s: *const ::std::os::raw::c_char) -> okScriptValue_HANDLE;
}
extern "C" {
    pub fn okScriptValue_NewBool(b: okBool) -> okScriptValue_HANDLE;
}
extern "C" {
    pub fn okScriptValue_NewInt(n: ::std::os::raw::c_int) -> okScriptValue_HANDLE;
}
extern "C" {
    pub fn okScriptValue_NewBuffer(buf: okBuffer_HANDLE) -> okScriptValue_HANDLE;
}
extern "C" {
    pub fn okScriptValue_GetAsString(
        h: okScriptValue_HANDLE,
        ps: *mut *const ::std::os::raw::c_char,
    ) -> okBool;
}
extern "C" {
    pub fn okScriptValue_GetAsBool(h: okScriptValue_HANDLE, pb: *mut okBool) -> okBool;
}
extern "C" {
    pub fn okScriptValue_GetAsInt(
        h: okScriptValue_HANDLE,
        pn: *mut ::std::os::raw::c_int,
    ) -> okBool;
}
extern "C" {
    pub fn okScriptValue_GetAsBuffer(h: okScriptValue_HANDLE, pbuf: *mut okBuffer_HANDLE)
        -> okBool;
}
extern "C" {
    pub fn okScriptValue_Destruct(h: okScriptValue_HANDLE);
}
extern "C" {
    pub fn okScriptValues_Construct() -> okScriptValues_HANDLE;
}
extern "C" {
    pub fn okScriptValues_Copy(h: okScriptValues_HANDLE) -> okScriptValues_HANDLE;
}
extern "C" {
    pub fn okScriptValues_Destruct(hnd: okScriptValues_HANDLE);
}
extern "C" {
    pub fn okScriptValues_Clear(hnd: okScriptValues_HANDLE);
}
extern "C" {
    pub fn okScriptValues_Add(hnd: okScriptValues_HANDLE, arg: okScriptValue_HANDLE);
}
extern "C" {
    pub fn okScriptValues_GetCount(hnd: okScriptValues_HANDLE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn okScriptValues_Get(
        hnd: okScriptValues_HANDLE,
        n: ::std::os::raw::c_int,
    ) -> okScriptValue_HANDLE;
}
extern "C" {
    pub fn okFrontPanel_Construct() -> okFrontPanel_HANDLE;
}
extern "C" {
    pub fn okFrontPanel_Destruct(hnd: okFrontPanel_HANDLE);
}
extern "C" {
    pub fn okFrontPanel_GetErrorString(
        ec: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn okFrontPanel_GetLastErrorMessage(
        hnd: okFrontPanel_HANDLE,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn okFrontPanel_AddCustomDevice(
        matchInfo: *const okTDeviceMatchInfo,
        devInfo: *const okTDeviceInfo,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_RemoveCustomDevice(productID: ::std::os::raw::c_int) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_WriteI2C(
        hnd: okFrontPanel_HANDLE,
        addr: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_uchar,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_ReadI2C(
        hnd: okFrontPanel_HANDLE,
        addr: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_uchar,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_FlashEraseSector(hnd: okFrontPanel_HANDLE, address: UINT32)
        -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_FlashWrite(
        hnd: okFrontPanel_HANDLE,
        address: UINT32,
        length: UINT32,
        buf: *const UINT8,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_FlashRead(
        hnd: okFrontPanel_HANDLE,
        address: UINT32,
        length: UINT32,
        buf: *mut UINT8,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_GetFPGAResetProfile(
        hnd: okFrontPanel_HANDLE,
        method: ok_FPGAConfigurationMethod,
        profile: *mut okTFPGAResetProfile,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_GetFPGAResetProfileWithSize(
        hnd: okFrontPanel_HANDLE,
        method: ok_FPGAConfigurationMethod,
        profile: *mut okTFPGAResetProfile,
        size: ::std::os::raw::c_uint,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_SetFPGAResetProfile(
        hnd: okFrontPanel_HANDLE,
        method: ok_FPGAConfigurationMethod,
        profile: *const okTFPGAResetProfile,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_SetFPGAResetProfileWithSize(
        hnd: okFrontPanel_HANDLE,
        method: ok_FPGAConfigurationMethod,
        profile: *const okTFPGAResetProfile,
        size: ::std::os::raw::c_uint,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_ReadRegister(
        hnd: okFrontPanel_HANDLE,
        addr: UINT32,
        data: *mut UINT32,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_ReadRegisters(
        hnd: okFrontPanel_HANDLE,
        num: ::std::os::raw::c_uint,
        regs: *mut okTRegisterEntry,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_WriteRegister(
        hnd: okFrontPanel_HANDLE,
        addr: UINT32,
        data: UINT32,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_WriteRegisters(
        hnd: okFrontPanel_HANDLE,
        num: ::std::os::raw::c_uint,
        regs: *const okTRegisterEntry,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_GetHostInterfaceWidth(hnd: okFrontPanel_HANDLE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn okFrontPanel_IsHighSpeed(hnd: okFrontPanel_HANDLE) -> Bool;
}
extern "C" {
    pub fn okFrontPanel_GetBoardModel(hnd: okFrontPanel_HANDLE) -> ok_BoardModel;
}
extern "C" {
    pub fn okFrontPanel_FindUSBDeviceModel(
        usbVID: ::std::os::raw::c_uint,
        usbPID: ::std::os::raw::c_uint,
    ) -> ok_BoardModel;
}
extern "C" {
    pub fn okFrontPanel_GetBoardModelString(
        hnd: okFrontPanel_HANDLE,
        m: ok_BoardModel,
        buf: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn okFrontPanel_GetDeviceCount(hnd: okFrontPanel_HANDLE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn okFrontPanel_GetDeviceListModel(
        hnd: okFrontPanel_HANDLE,
        num: ::std::os::raw::c_int,
    ) -> ok_BoardModel;
}
extern "C" {
    pub fn okFrontPanel_GetDeviceListSerial(
        hnd: okFrontPanel_HANDLE,
        num: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn okFrontPanel_OpenBySerial(
        hnd: okFrontPanel_HANDLE,
        serial: *const ::std::os::raw::c_char,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_IsOpen(hnd: okFrontPanel_HANDLE) -> Bool;
}
extern "C" {
    pub fn okFrontPanel_IsRemote(hnd: okFrontPanel_HANDLE) -> Bool;
}
extern "C" {
    pub fn okFrontPanel_EnableAsynchronousTransfers(hnd: okFrontPanel_HANDLE, enable: Bool);
}
extern "C" {
    pub fn okFrontPanel_SetBTPipePollingInterval(
        hnd: okFrontPanel_HANDLE,
        interval: ::std::os::raw::c_int,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_SetTimeout(hnd: okFrontPanel_HANDLE, timeout: ::std::os::raw::c_int);
}
extern "C" {
    pub fn okFrontPanel_GetDeviceMajorVersion(hnd: okFrontPanel_HANDLE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn okFrontPanel_GetDeviceMinorVersion(hnd: okFrontPanel_HANDLE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn okFrontPanel_ResetFPGA(hnd: okFrontPanel_HANDLE) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_Close(hnd: okFrontPanel_HANDLE);
}
extern "C" {
    pub fn okFrontPanel_GetSerialNumber(hnd: okFrontPanel_HANDLE, buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn okFrontPanel_GetDeviceSensors(
        hnd: okFrontPanel_HANDLE,
        settings: okDeviceSensors_HANDLE,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_GetDeviceSettings(
        hnd: okFrontPanel_HANDLE,
        settings: okDeviceSettings_HANDLE,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_GetDeviceInfoWithSize(
        hnd: okFrontPanel_HANDLE,
        info: *mut okTDeviceInfo,
        size: ::std::os::raw::c_uint,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_GetDeviceID(hnd: okFrontPanel_HANDLE, buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn okFrontPanel_SetDeviceID(hnd: okFrontPanel_HANDLE, strID: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn okFrontPanel_ConfigureFPGA(
        hnd: okFrontPanel_HANDLE,
        strFilename: *const ::std::os::raw::c_char,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_ConfigureFPGAWithReset(
        hnd: okFrontPanel_HANDLE,
        strFilename: *const ::std::os::raw::c_char,
        reset: *const okTFPGAResetProfile,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_ConfigureFPGAFromMemory(
        hnd: okFrontPanel_HANDLE,
        data: *mut ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_ulong,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_ConfigureFPGAFromMemoryWithProgress(
        hnd: okFrontPanel_HANDLE,
        data: *mut ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_ulong,
        callback: okTProgressCallback,
        arg: *mut ::std::os::raw::c_void,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_ConfigureFPGAFromMemoryWithReset(
        hnd: okFrontPanel_HANDLE,
        data: *mut ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_ulong,
        reset: *const okTFPGAResetProfile,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_ConfigureFPGAFromFlash(
        hnd: okFrontPanel_HANDLE,
        configIndex: ::std::os::raw::c_ulong,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_GetPLL22150Configuration(
        hnd: okFrontPanel_HANDLE,
        pll: okPLL22150_HANDLE,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_SetPLL22150Configuration(
        hnd: okFrontPanel_HANDLE,
        pll: okPLL22150_HANDLE,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_GetEepromPLL22150Configuration(
        hnd: okFrontPanel_HANDLE,
        pll: okPLL22150_HANDLE,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_SetEepromPLL22150Configuration(
        hnd: okFrontPanel_HANDLE,
        pll: okPLL22150_HANDLE,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_GetPLL22393Configuration(
        hnd: okFrontPanel_HANDLE,
        pll: okPLL22393_HANDLE,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_SetPLL22393Configuration(
        hnd: okFrontPanel_HANDLE,
        pll: okPLL22393_HANDLE,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_GetEepromPLL22393Configuration(
        hnd: okFrontPanel_HANDLE,
        pll: okPLL22393_HANDLE,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_SetEepromPLL22393Configuration(
        hnd: okFrontPanel_HANDLE,
        pll: okPLL22393_HANDLE,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_LoadDefaultPLLConfiguration(hnd: okFrontPanel_HANDLE) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_IsFrontPanelEnabled(hnd: okFrontPanel_HANDLE) -> Bool;
}
extern "C" {
    pub fn okFrontPanel_IsFrontPanel3Supported(hnd: okFrontPanel_HANDLE) -> Bool;
}
extern "C" {
    pub fn okFrontPanel_UpdateWireIns(hnd: okFrontPanel_HANDLE) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_GetWireInValue(
        hnd: okFrontPanel_HANDLE,
        epAddr: ::std::os::raw::c_int,
        val: *mut UINT32,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_SetWireInValue(
        hnd: okFrontPanel_HANDLE,
        ep: ::std::os::raw::c_int,
        val: ::std::os::raw::c_ulong,
        mask: ::std::os::raw::c_ulong,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_UpdateWireOuts(hnd: okFrontPanel_HANDLE) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_GetWireOutValue(
        hnd: okFrontPanel_HANDLE,
        epAddr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn okFrontPanel_ActivateTriggerIn(
        hnd: okFrontPanel_HANDLE,
        epAddr: ::std::os::raw::c_int,
        bit: ::std::os::raw::c_int,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_UpdateTriggerOuts(hnd: okFrontPanel_HANDLE) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanel_IsTriggered(
        hnd: okFrontPanel_HANDLE,
        epAddr: ::std::os::raw::c_int,
        mask: ::std::os::raw::c_ulong,
    ) -> Bool;
}
extern "C" {
    pub fn okFrontPanel_GetTriggerOutVector(
        hnd: okFrontPanel_HANDLE,
        epAddr: ::std::os::raw::c_int,
    ) -> UINT32;
}
extern "C" {
    pub fn okFrontPanel_GetLastTransferLength(hnd: okFrontPanel_HANDLE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn okFrontPanel_WriteToPipeIn(
        hnd: okFrontPanel_HANDLE,
        epAddr: ::std::os::raw::c_int,
        length: ::std::os::raw::c_long,
        data: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn okFrontPanel_ReadFromPipeOut(
        hnd: okFrontPanel_HANDLE,
        epAddr: ::std::os::raw::c_int,
        length: ::std::os::raw::c_long,
        data: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn okFrontPanel_WriteToBlockPipeIn(
        hnd: okFrontPanel_HANDLE,
        epAddr: ::std::os::raw::c_int,
        blockSize: ::std::os::raw::c_int,
        length: ::std::os::raw::c_long,
        data: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn okFrontPanel_ReadFromBlockPipeOut(
        hnd: okFrontPanel_HANDLE,
        epAddr: ::std::os::raw::c_int,
        blockSize: ::std::os::raw::c_int,
        length: ::std::os::raw::c_long,
        data: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn okScriptEngine_ConstructLua(fp: okFrontPanel_HANDLE) -> okScriptEngine_HANDLE;
}
extern "C" {
    pub fn okScriptEngine_Destruct(hnd: okScriptEngine_HANDLE);
}
extern "C" {
    pub fn okScriptEngine_LoadScript(
        hnd: okScriptEngine_HANDLE,
        name: *const ::std::os::raw::c_char,
        code: *const ::std::os::raw::c_char,
        err: *mut *mut okError,
    ) -> Bool;
}
extern "C" {
    pub fn okScriptEngine_LoadFile(
        hnd: okScriptEngine_HANDLE,
        path: *const ::std::os::raw::c_char,
        err: *mut *mut okError,
    ) -> Bool;
}
extern "C" {
    pub fn okScriptEngine_PrependToScriptPath(
        hnd: okScriptEngine_HANDLE,
        dir: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn okScriptEngine_RunScriptFunction(
        hnd: okScriptEngine_HANDLE,
        name: *const ::std::os::raw::c_char,
        retval: *mut okScriptValues_HANDLE,
        args: okScriptValues_HANDLE,
        err: *mut *mut okError,
    ) -> Bool;
}
extern "C" {
    pub fn okScriptEngine_RunScriptFunctionAsync(
        hnd: okScriptEngine_HANDLE,
        callback: okScriptEngineAsyncCallback,
        data: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
        args: okScriptValues_HANDLE,
        err: *mut *mut okError,
    ) -> Bool;
}
pub type okFrontPanelManager_OnDeviceCallback_t = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        serial: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn okFrontPanelManager_Construct(
        self_: okFrontPanelManager_HANDLE,
        realm: *const ::std::os::raw::c_char,
    ) -> okCFrontPanelManager_HANDLE;
}
extern "C" {
    pub fn okFrontPanelManager_ConstructWithCallbacks(
        self_: okFrontPanelManager_HANDLE,
        realm: *const ::std::os::raw::c_char,
        onAdded: okFrontPanelManager_OnDeviceCallback_t,
        onRemoved: okFrontPanelManager_OnDeviceCallback_t,
    ) -> okCFrontPanelManager_HANDLE;
}
extern "C" {
    pub fn okFrontPanelManager_Destruct(hnd: okCFrontPanelManager_HANDLE);
}
extern "C" {
    pub fn okFrontPanelManager_StartMonitoring(hnd: okCFrontPanelManager_HANDLE) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanelManager_StartMonitoringWithCBInfo(
        hnd: okCFrontPanelManager_HANDLE,
        cbInfo: *mut okTCallbackInfo,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanelManager_StopMonitoring(hnd: okCFrontPanelManager_HANDLE) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanelManager_EnterMonitorLoop(
        hnd: okCFrontPanelManager_HANDLE,
        cbInfo: *const okTCallbackInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn okFrontPanelManager_EnterMonitorLoopWithTimeout(
        hnd: okCFrontPanelManager_HANDLE,
        cbInfo: *const okTCallbackInfo,
        millisecondsTimeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn okFrontPanelManager_ExitMonitorLoop(
        hnd: okCFrontPanelManager_HANDLE,
        exitCode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn okFrontPanelManager_Open(
        hnd: okCFrontPanelManager_HANDLE,
        serial: *const ::std::os::raw::c_char,
    ) -> okFrontPanel_HANDLE;
}
extern "C" {
    pub fn okFrontPanelManager_EmulateTestDeviceConnection(
        serial: *const ::std::os::raw::c_char,
        connect: Bool,
    ) -> ok_ErrorCode;
}
extern "C" {
    pub fn okFrontPanelDevices_Construct(
        realm: *const ::std::os::raw::c_char,
        err: *mut *mut okError,
    ) -> okCFrontPanelDevices_HANDLE;
}
extern "C" {
    pub fn okFrontPanelDevices_Destruct(hnd: okCFrontPanelDevices_HANDLE);
}
extern "C" {
    pub fn okFrontPanelDevices_GetCount(hnd: okCFrontPanelDevices_HANDLE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn okFrontPanelDevices_GetSerial(
        hnd: okCFrontPanelDevices_HANDLE,
        num: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn okFrontPanelDevices_Open(
        hnd: okCFrontPanelDevices_HANDLE,
        serial: *const ::std::os::raw::c_char,
    ) -> okFrontPanel_HANDLE;
}
